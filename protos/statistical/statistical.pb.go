// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: statistical.proto

package daily_statistical

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetUsersOverviewRep struct {
	Uniacid              int64    `protobuf:"varint,1,opt,name=uniacid,proto3" json:"uniacid,omitempty"`
	Openid               string   `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	OpenidWa             string   `protobuf:"bytes,3,opt,name=openidWa,proto3" json:"openidWa,omitempty"`
	Unionid              string   `protobuf:"bytes,4,opt,name=unionid,proto3" json:"unionid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUsersOverviewRep) Reset()         { *m = GetUsersOverviewRep{} }
func (m *GetUsersOverviewRep) String() string { return proto.CompactTextString(m) }
func (*GetUsersOverviewRep) ProtoMessage()    {}
func (*GetUsersOverviewRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{0}
}
func (m *GetUsersOverviewRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersOverviewRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersOverviewRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetUsersOverviewRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersOverviewRep.Merge(dst, src)
}
func (m *GetUsersOverviewRep) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersOverviewRep) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersOverviewRep.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersOverviewRep proto.InternalMessageInfo

func (m *GetUsersOverviewRep) GetUniacid() int64 {
	if m != nil {
		return m.Uniacid
	}
	return 0
}

func (m *GetUsersOverviewRep) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *GetUsersOverviewRep) GetOpenidWa() string {
	if m != nil {
		return m.OpenidWa
	}
	return ""
}

func (m *GetUsersOverviewRep) GetUnionid() string {
	if m != nil {
		return m.Unionid
	}
	return ""
}

type GetUsersOverviewResp struct {
	TotalPlatformUsers   int64    `protobuf:"varint,1,opt,name=total_platform_users,json=totalPlatformUsers,proto3" json:"total_platform_users,omitempty"`
	TotalRoamUsers       int64    `protobuf:"varint,2,opt,name=total_roam_users,json=totalRoamUsers,proto3" json:"total_roam_users,omitempty"`
	TotalRoamMiniUsers   int64    `protobuf:"varint,3,opt,name=total_roamMini_users,json=totalRoamMiniUsers,proto3" json:"total_roamMini_users,omitempty"`
	TotalPlatnewUsers    int64    `protobuf:"varint,4,opt,name=total_platnew_users,json=totalPlatnewUsers,proto3" json:"total_platnew_users,omitempty"`
	TotalRoamnewUsers    int64    `protobuf:"varint,5,opt,name=total_roamnew_users,json=totalRoamnewUsers,proto3" json:"total_roamnew_users,omitempty"`
	TotalSharenewUsers   int64    `protobuf:"varint,6,opt,name=total_sharenew_users,json=totalSharenewUsers,proto3" json:"total_sharenew_users,omitempty"`
	TotalRapltnewUsers   int64    `protobuf:"varint,7,opt,name=total_rapltnew_users,json=totalRapltnewUsers,proto3" json:"total_rapltnew_users,omitempty"`
	TotalRmininewUsers   int64    `protobuf:"varint,8,opt,name=total_rmininew_users,json=totalRmininewUsers,proto3" json:"total_rmininew_users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUsersOverviewResp) Reset()         { *m = GetUsersOverviewResp{} }
func (m *GetUsersOverviewResp) String() string { return proto.CompactTextString(m) }
func (*GetUsersOverviewResp) ProtoMessage()    {}
func (*GetUsersOverviewResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{1}
}
func (m *GetUsersOverviewResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersOverviewResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersOverviewResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetUsersOverviewResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersOverviewResp.Merge(dst, src)
}
func (m *GetUsersOverviewResp) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersOverviewResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersOverviewResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersOverviewResp proto.InternalMessageInfo

func (m *GetUsersOverviewResp) GetTotalPlatformUsers() int64 {
	if m != nil {
		return m.TotalPlatformUsers
	}
	return 0
}

func (m *GetUsersOverviewResp) GetTotalRoamUsers() int64 {
	if m != nil {
		return m.TotalRoamUsers
	}
	return 0
}

func (m *GetUsersOverviewResp) GetTotalRoamMiniUsers() int64 {
	if m != nil {
		return m.TotalRoamMiniUsers
	}
	return 0
}

func (m *GetUsersOverviewResp) GetTotalPlatnewUsers() int64 {
	if m != nil {
		return m.TotalPlatnewUsers
	}
	return 0
}

func (m *GetUsersOverviewResp) GetTotalRoamnewUsers() int64 {
	if m != nil {
		return m.TotalRoamnewUsers
	}
	return 0
}

func (m *GetUsersOverviewResp) GetTotalSharenewUsers() int64 {
	if m != nil {
		return m.TotalSharenewUsers
	}
	return 0
}

func (m *GetUsersOverviewResp) GetTotalRapltnewUsers() int64 {
	if m != nil {
		return m.TotalRapltnewUsers
	}
	return 0
}

func (m *GetUsersOverviewResp) GetTotalRmininewUsers() int64 {
	if m != nil {
		return m.TotalRmininewUsers
	}
	return 0
}

type GetWxAPIDataReq struct {
	Uniacid              int64    `protobuf:"varint,1,opt,name=uniacid,proto3" json:"uniacid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWxAPIDataReq) Reset()         { *m = GetWxAPIDataReq{} }
func (m *GetWxAPIDataReq) String() string { return proto.CompactTextString(m) }
func (*GetWxAPIDataReq) ProtoMessage()    {}
func (*GetWxAPIDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{2}
}
func (m *GetWxAPIDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWxAPIDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWxAPIDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetWxAPIDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWxAPIDataReq.Merge(dst, src)
}
func (m *GetWxAPIDataReq) XXX_Size() int {
	return m.Size()
}
func (m *GetWxAPIDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWxAPIDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetWxAPIDataReq proto.InternalMessageInfo

func (m *GetWxAPIDataReq) GetUniacid() int64 {
	if m != nil {
		return m.Uniacid
	}
	return 0
}

type GetWxAPIDataResp struct {
	YesterdayRoamTusers       int64    `protobuf:"varint,1,opt,name=yesterday_roam_tusers,json=yesterdayRoamTusers,proto3" json:"yesterday_roam_tusers,omitempty"`
	YesterdayRoamNewusers     int64    `protobuf:"varint,2,opt,name=yesterday_roam_newusers,json=yesterdayRoamNewusers,proto3" json:"yesterday_roam_newusers,omitempty"`
	YesterdayRoamCancelusers  int64    `protobuf:"varint,3,opt,name=yesterday_roam_cancelusers,json=yesterdayRoamCancelusers,proto3" json:"yesterday_roam_cancelusers,omitempty"`
	YesterdayShareTusers      int64    `protobuf:"varint,4,opt,name=yesterday_share_tusers,json=yesterdayShareTusers,proto3" json:"yesterday_share_tusers,omitempty"`
	YesterdayShareNewusers    int64    `protobuf:"varint,5,opt,name=yesterday_share_newusers,json=yesterdayShareNewusers,proto3" json:"yesterday_share_newusers,omitempty"`
	YesterdayShareCancelusers int64    `protobuf:"varint,6,opt,name=yesterday_share_cancelusers,json=yesterdayShareCancelusers,proto3" json:"yesterday_share_cancelusers,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *GetWxAPIDataResp) Reset()         { *m = GetWxAPIDataResp{} }
func (m *GetWxAPIDataResp) String() string { return proto.CompactTextString(m) }
func (*GetWxAPIDataResp) ProtoMessage()    {}
func (*GetWxAPIDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{3}
}
func (m *GetWxAPIDataResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWxAPIDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWxAPIDataResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetWxAPIDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWxAPIDataResp.Merge(dst, src)
}
func (m *GetWxAPIDataResp) XXX_Size() int {
	return m.Size()
}
func (m *GetWxAPIDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWxAPIDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetWxAPIDataResp proto.InternalMessageInfo

func (m *GetWxAPIDataResp) GetYesterdayRoamTusers() int64 {
	if m != nil {
		return m.YesterdayRoamTusers
	}
	return 0
}

func (m *GetWxAPIDataResp) GetYesterdayRoamNewusers() int64 {
	if m != nil {
		return m.YesterdayRoamNewusers
	}
	return 0
}

func (m *GetWxAPIDataResp) GetYesterdayRoamCancelusers() int64 {
	if m != nil {
		return m.YesterdayRoamCancelusers
	}
	return 0
}

func (m *GetWxAPIDataResp) GetYesterdayShareTusers() int64 {
	if m != nil {
		return m.YesterdayShareTusers
	}
	return 0
}

func (m *GetWxAPIDataResp) GetYesterdayShareNewusers() int64 {
	if m != nil {
		return m.YesterdayShareNewusers
	}
	return 0
}

func (m *GetWxAPIDataResp) GetYesterdayShareCancelusers() int64 {
	if m != nil {
		return m.YesterdayShareCancelusers
	}
	return 0
}

type GetSalesDataReq struct {
	Uniacid              int64    `protobuf:"varint,1,opt,name=uniacid,proto3" json:"uniacid,omitempty"`
	Openid               string   `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	OpenidWa             string   `protobuf:"bytes,3,opt,name=openidWa,proto3" json:"openidWa,omitempty"`
	Unionid              string   `protobuf:"bytes,4,opt,name=unionid,proto3" json:"unionid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSalesDataReq) Reset()         { *m = GetSalesDataReq{} }
func (m *GetSalesDataReq) String() string { return proto.CompactTextString(m) }
func (*GetSalesDataReq) ProtoMessage()    {}
func (*GetSalesDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{4}
}
func (m *GetSalesDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSalesDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSalesDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSalesDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSalesDataReq.Merge(dst, src)
}
func (m *GetSalesDataReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSalesDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSalesDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSalesDataReq proto.InternalMessageInfo

func (m *GetSalesDataReq) GetUniacid() int64 {
	if m != nil {
		return m.Uniacid
	}
	return 0
}

func (m *GetSalesDataReq) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *GetSalesDataReq) GetOpenidWa() string {
	if m != nil {
		return m.OpenidWa
	}
	return ""
}

func (m *GetSalesDataReq) GetUnionid() string {
	if m != nil {
		return m.Unionid
	}
	return ""
}

type GetSalesDataResp struct {
	YeterdayNeworders      int64    `protobuf:"varint,1,opt,name=yeterday_neworders,json=yeterdayNeworders,proto3" json:"yeterday_neworders,omitempty"`
	YesterdayNewordPrices  float32  `protobuf:"fixed32,2,opt,name=yesterday_neword_prices,json=yesterdayNewordPrices,proto3" json:"yesterday_neword_prices,omitempty"`
	YesterdayNewordGdtotal int64    `protobuf:"varint,3,opt,name=yesterday_neword_gdtotal,json=yesterdayNewordGdtotal,proto3" json:"yesterday_neword_gdtotal,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetSalesDataResp) Reset()         { *m = GetSalesDataResp{} }
func (m *GetSalesDataResp) String() string { return proto.CompactTextString(m) }
func (*GetSalesDataResp) ProtoMessage()    {}
func (*GetSalesDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{5}
}
func (m *GetSalesDataResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSalesDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSalesDataResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSalesDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSalesDataResp.Merge(dst, src)
}
func (m *GetSalesDataResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSalesDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSalesDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSalesDataResp proto.InternalMessageInfo

func (m *GetSalesDataResp) GetYeterdayNeworders() int64 {
	if m != nil {
		return m.YeterdayNeworders
	}
	return 0
}

func (m *GetSalesDataResp) GetYesterdayNewordPrices() float32 {
	if m != nil {
		return m.YesterdayNewordPrices
	}
	return 0
}

func (m *GetSalesDataResp) GetYesterdayNewordGdtotal() int64 {
	if m != nil {
		return m.YesterdayNewordGdtotal
	}
	return 0
}

type GetRoamMiniWxAPIDataReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoamMiniWxAPIDataReq) Reset()         { *m = GetRoamMiniWxAPIDataReq{} }
func (m *GetRoamMiniWxAPIDataReq) String() string { return proto.CompactTextString(m) }
func (*GetRoamMiniWxAPIDataReq) ProtoMessage()    {}
func (*GetRoamMiniWxAPIDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{6}
}
func (m *GetRoamMiniWxAPIDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoamMiniWxAPIDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoamMiniWxAPIDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRoamMiniWxAPIDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoamMiniWxAPIDataReq.Merge(dst, src)
}
func (m *GetRoamMiniWxAPIDataReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRoamMiniWxAPIDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoamMiniWxAPIDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoamMiniWxAPIDataReq proto.InternalMessageInfo

type GetRoamMiniWxAPIDataResp struct {
	VisitTotal           int64    `protobuf:"varint,1,opt,name=visit_total,json=visitTotal,proto3" json:"visit_total,omitempty"`
	VisitPv              int64    `protobuf:"varint,2,opt,name=visit_pv,json=visitPv,proto3" json:"visit_pv,omitempty"`
	VisitUv              int64    `protobuf:"varint,3,opt,name=visit_uv,json=visitUv,proto3" json:"visit_uv,omitempty"`
	VisitUvNew           int64    `protobuf:"varint,4,opt,name=visit_uv_new,json=visitUvNew,proto3" json:"visit_uv_new,omitempty"`
	StayTimeUv           int64    `protobuf:"varint,5,opt,name=stay_time_uv,json=stayTimeUv,proto3" json:"stay_time_uv,omitempty"`
	RpageVisitPv         int64    `protobuf:"varint,6,opt,name=rpage_visit_pv,json=rpageVisitPv,proto3" json:"rpage_visit_pv,omitempty"`
	RpageVisitUv         int64    `protobuf:"varint,7,opt,name=rpage_visit_uv,json=rpageVisitUv,proto3" json:"rpage_visit_uv,omitempty"`
	DpageVisitPv         int64    `protobuf:"varint,8,opt,name=dpage_visit_pv,json=dpageVisitPv,proto3" json:"dpage_visit_pv,omitempty"`
	DpageVisitUv         int64    `protobuf:"varint,9,opt,name=dpage_visit_uv,json=dpageVisitUv,proto3" json:"dpage_visit_uv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoamMiniWxAPIDataResp) Reset()         { *m = GetRoamMiniWxAPIDataResp{} }
func (m *GetRoamMiniWxAPIDataResp) String() string { return proto.CompactTextString(m) }
func (*GetRoamMiniWxAPIDataResp) ProtoMessage()    {}
func (*GetRoamMiniWxAPIDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistical_ce04bc59675c22c1, []int{7}
}
func (m *GetRoamMiniWxAPIDataResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoamMiniWxAPIDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoamMiniWxAPIDataResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRoamMiniWxAPIDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoamMiniWxAPIDataResp.Merge(dst, src)
}
func (m *GetRoamMiniWxAPIDataResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRoamMiniWxAPIDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoamMiniWxAPIDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoamMiniWxAPIDataResp proto.InternalMessageInfo

func (m *GetRoamMiniWxAPIDataResp) GetVisitTotal() int64 {
	if m != nil {
		return m.VisitTotal
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetVisitPv() int64 {
	if m != nil {
		return m.VisitPv
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetVisitUv() int64 {
	if m != nil {
		return m.VisitUv
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetVisitUvNew() int64 {
	if m != nil {
		return m.VisitUvNew
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetStayTimeUv() int64 {
	if m != nil {
		return m.StayTimeUv
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetRpageVisitPv() int64 {
	if m != nil {
		return m.RpageVisitPv
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetRpageVisitUv() int64 {
	if m != nil {
		return m.RpageVisitUv
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetDpageVisitPv() int64 {
	if m != nil {
		return m.DpageVisitPv
	}
	return 0
}

func (m *GetRoamMiniWxAPIDataResp) GetDpageVisitUv() int64 {
	if m != nil {
		return m.DpageVisitUv
	}
	return 0
}

func init() {
	proto.RegisterType((*GetUsersOverviewRep)(nil), "daily.statistical.GetUsersOverviewRep")
	proto.RegisterType((*GetUsersOverviewResp)(nil), "daily.statistical.GetUsersOverviewResp")
	proto.RegisterType((*GetWxAPIDataReq)(nil), "daily.statistical.GetWxAPIDataReq")
	proto.RegisterType((*GetWxAPIDataResp)(nil), "daily.statistical.GetWxAPIDataResp")
	proto.RegisterType((*GetSalesDataReq)(nil), "daily.statistical.GetSalesDataReq")
	proto.RegisterType((*GetSalesDataResp)(nil), "daily.statistical.GetSalesDataResp")
	proto.RegisterType((*GetRoamMiniWxAPIDataReq)(nil), "daily.statistical.GetRoamMiniWxAPIDataReq")
	proto.RegisterType((*GetRoamMiniWxAPIDataResp)(nil), "daily.statistical.GetRoamMiniWxAPIDataResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Statistical service

type StatisticalClient interface {
	GetUsersOverview(ctx context.Context, in *GetUsersOverviewRep, opts ...grpc.CallOption) (*GetUsersOverviewResp, error)
	GetWxAPIData(ctx context.Context, in *GetWxAPIDataReq, opts ...grpc.CallOption) (*GetWxAPIDataResp, error)
	GetSalesData(ctx context.Context, in *GetSalesDataReq, opts ...grpc.CallOption) (*GetSalesDataResp, error)
	GetRoamMiniWxAPIData(ctx context.Context, in *GetRoamMiniWxAPIDataReq, opts ...grpc.CallOption) (*GetRoamMiniWxAPIDataResp, error)
}

type statisticalClient struct {
	cc *grpc.ClientConn
}

func NewStatisticalClient(cc *grpc.ClientConn) StatisticalClient {
	return &statisticalClient{cc}
}

func (c *statisticalClient) GetUsersOverview(ctx context.Context, in *GetUsersOverviewRep, opts ...grpc.CallOption) (*GetUsersOverviewResp, error) {
	out := new(GetUsersOverviewResp)
	err := c.cc.Invoke(ctx, "/daily.statistical.Statistical/GetUsersOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticalClient) GetWxAPIData(ctx context.Context, in *GetWxAPIDataReq, opts ...grpc.CallOption) (*GetWxAPIDataResp, error) {
	out := new(GetWxAPIDataResp)
	err := c.cc.Invoke(ctx, "/daily.statistical.Statistical/GetWxAPIData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticalClient) GetSalesData(ctx context.Context, in *GetSalesDataReq, opts ...grpc.CallOption) (*GetSalesDataResp, error) {
	out := new(GetSalesDataResp)
	err := c.cc.Invoke(ctx, "/daily.statistical.Statistical/GetSalesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticalClient) GetRoamMiniWxAPIData(ctx context.Context, in *GetRoamMiniWxAPIDataReq, opts ...grpc.CallOption) (*GetRoamMiniWxAPIDataResp, error) {
	out := new(GetRoamMiniWxAPIDataResp)
	err := c.cc.Invoke(ctx, "/daily.statistical.Statistical/GetRoamMiniWxAPIData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Statistical service

type StatisticalServer interface {
	GetUsersOverview(context.Context, *GetUsersOverviewRep) (*GetUsersOverviewResp, error)
	GetWxAPIData(context.Context, *GetWxAPIDataReq) (*GetWxAPIDataResp, error)
	GetSalesData(context.Context, *GetSalesDataReq) (*GetSalesDataResp, error)
	GetRoamMiniWxAPIData(context.Context, *GetRoamMiniWxAPIDataReq) (*GetRoamMiniWxAPIDataResp, error)
}

func RegisterStatisticalServer(s *grpc.Server, srv StatisticalServer) {
	s.RegisterService(&_Statistical_serviceDesc, srv)
}

func _Statistical_GetUsersOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersOverviewRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticalServer).GetUsersOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily.statistical.Statistical/GetUsersOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticalServer).GetUsersOverview(ctx, req.(*GetUsersOverviewRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistical_GetWxAPIData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWxAPIDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticalServer).GetWxAPIData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily.statistical.Statistical/GetWxAPIData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticalServer).GetWxAPIData(ctx, req.(*GetWxAPIDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistical_GetSalesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticalServer).GetSalesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily.statistical.Statistical/GetSalesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticalServer).GetSalesData(ctx, req.(*GetSalesDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistical_GetRoamMiniWxAPIData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoamMiniWxAPIDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticalServer).GetRoamMiniWxAPIData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily.statistical.Statistical/GetRoamMiniWxAPIData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticalServer).GetRoamMiniWxAPIData(ctx, req.(*GetRoamMiniWxAPIDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Statistical_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daily.statistical.Statistical",
	HandlerType: (*StatisticalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersOverview",
			Handler:    _Statistical_GetUsersOverview_Handler,
		},
		{
			MethodName: "GetWxAPIData",
			Handler:    _Statistical_GetWxAPIData_Handler,
		},
		{
			MethodName: "GetSalesData",
			Handler:    _Statistical_GetSalesData_Handler,
		},
		{
			MethodName: "GetRoamMiniWxAPIData",
			Handler:    _Statistical_GetRoamMiniWxAPIData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistical.proto",
}

func (m *GetUsersOverviewRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersOverviewRep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uniacid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.Uniacid))
	}
	if len(m.Openid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(len(m.Openid)))
		i += copy(dAtA[i:], m.Openid)
	}
	if len(m.OpenidWa) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(len(m.OpenidWa)))
		i += copy(dAtA[i:], m.OpenidWa)
	}
	if len(m.Unionid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(len(m.Unionid)))
		i += copy(dAtA[i:], m.Unionid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUsersOverviewResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersOverviewResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalPlatformUsers != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalPlatformUsers))
	}
	if m.TotalRoamUsers != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalRoamUsers))
	}
	if m.TotalRoamMiniUsers != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalRoamMiniUsers))
	}
	if m.TotalPlatnewUsers != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalPlatnewUsers))
	}
	if m.TotalRoamnewUsers != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalRoamnewUsers))
	}
	if m.TotalSharenewUsers != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalSharenewUsers))
	}
	if m.TotalRapltnewUsers != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalRapltnewUsers))
	}
	if m.TotalRmininewUsers != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.TotalRmininewUsers))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetWxAPIDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWxAPIDataReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uniacid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.Uniacid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetWxAPIDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWxAPIDataResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.YesterdayRoamTusers != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YesterdayRoamTusers))
	}
	if m.YesterdayRoamNewusers != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YesterdayRoamNewusers))
	}
	if m.YesterdayRoamCancelusers != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YesterdayRoamCancelusers))
	}
	if m.YesterdayShareTusers != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YesterdayShareTusers))
	}
	if m.YesterdayShareNewusers != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YesterdayShareNewusers))
	}
	if m.YesterdayShareCancelusers != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YesterdayShareCancelusers))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSalesDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSalesDataReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uniacid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.Uniacid))
	}
	if len(m.Openid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(len(m.Openid)))
		i += copy(dAtA[i:], m.Openid)
	}
	if len(m.OpenidWa) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(len(m.OpenidWa)))
		i += copy(dAtA[i:], m.OpenidWa)
	}
	if len(m.Unionid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(len(m.Unionid)))
		i += copy(dAtA[i:], m.Unionid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSalesDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSalesDataResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.YeterdayNeworders != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YeterdayNeworders))
	}
	if m.YesterdayNewordPrices != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.YesterdayNewordPrices))))
		i += 4
	}
	if m.YesterdayNewordGdtotal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.YesterdayNewordGdtotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRoamMiniWxAPIDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoamMiniWxAPIDataReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRoamMiniWxAPIDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoamMiniWxAPIDataResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VisitTotal != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.VisitTotal))
	}
	if m.VisitPv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.VisitPv))
	}
	if m.VisitUv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.VisitUv))
	}
	if m.VisitUvNew != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.VisitUvNew))
	}
	if m.StayTimeUv != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.StayTimeUv))
	}
	if m.RpageVisitPv != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.RpageVisitPv))
	}
	if m.RpageVisitUv != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.RpageVisitUv))
	}
	if m.DpageVisitPv != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.DpageVisitPv))
	}
	if m.DpageVisitUv != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintStatistical(dAtA, i, uint64(m.DpageVisitUv))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintStatistical(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetUsersOverviewRep) Size() (n int) {
	var l int
	_ = l
	if m.Uniacid != 0 {
		n += 1 + sovStatistical(uint64(m.Uniacid))
	}
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovStatistical(uint64(l))
	}
	l = len(m.OpenidWa)
	if l > 0 {
		n += 1 + l + sovStatistical(uint64(l))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovStatistical(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUsersOverviewResp) Size() (n int) {
	var l int
	_ = l
	if m.TotalPlatformUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalPlatformUsers))
	}
	if m.TotalRoamUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalRoamUsers))
	}
	if m.TotalRoamMiniUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalRoamMiniUsers))
	}
	if m.TotalPlatnewUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalPlatnewUsers))
	}
	if m.TotalRoamnewUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalRoamnewUsers))
	}
	if m.TotalSharenewUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalSharenewUsers))
	}
	if m.TotalRapltnewUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalRapltnewUsers))
	}
	if m.TotalRmininewUsers != 0 {
		n += 1 + sovStatistical(uint64(m.TotalRmininewUsers))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWxAPIDataReq) Size() (n int) {
	var l int
	_ = l
	if m.Uniacid != 0 {
		n += 1 + sovStatistical(uint64(m.Uniacid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWxAPIDataResp) Size() (n int) {
	var l int
	_ = l
	if m.YesterdayRoamTusers != 0 {
		n += 1 + sovStatistical(uint64(m.YesterdayRoamTusers))
	}
	if m.YesterdayRoamNewusers != 0 {
		n += 1 + sovStatistical(uint64(m.YesterdayRoamNewusers))
	}
	if m.YesterdayRoamCancelusers != 0 {
		n += 1 + sovStatistical(uint64(m.YesterdayRoamCancelusers))
	}
	if m.YesterdayShareTusers != 0 {
		n += 1 + sovStatistical(uint64(m.YesterdayShareTusers))
	}
	if m.YesterdayShareNewusers != 0 {
		n += 1 + sovStatistical(uint64(m.YesterdayShareNewusers))
	}
	if m.YesterdayShareCancelusers != 0 {
		n += 1 + sovStatistical(uint64(m.YesterdayShareCancelusers))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSalesDataReq) Size() (n int) {
	var l int
	_ = l
	if m.Uniacid != 0 {
		n += 1 + sovStatistical(uint64(m.Uniacid))
	}
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovStatistical(uint64(l))
	}
	l = len(m.OpenidWa)
	if l > 0 {
		n += 1 + l + sovStatistical(uint64(l))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovStatistical(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSalesDataResp) Size() (n int) {
	var l int
	_ = l
	if m.YeterdayNeworders != 0 {
		n += 1 + sovStatistical(uint64(m.YeterdayNeworders))
	}
	if m.YesterdayNewordPrices != 0 {
		n += 5
	}
	if m.YesterdayNewordGdtotal != 0 {
		n += 1 + sovStatistical(uint64(m.YesterdayNewordGdtotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoamMiniWxAPIDataReq) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoamMiniWxAPIDataResp) Size() (n int) {
	var l int
	_ = l
	if m.VisitTotal != 0 {
		n += 1 + sovStatistical(uint64(m.VisitTotal))
	}
	if m.VisitPv != 0 {
		n += 1 + sovStatistical(uint64(m.VisitPv))
	}
	if m.VisitUv != 0 {
		n += 1 + sovStatistical(uint64(m.VisitUv))
	}
	if m.VisitUvNew != 0 {
		n += 1 + sovStatistical(uint64(m.VisitUvNew))
	}
	if m.StayTimeUv != 0 {
		n += 1 + sovStatistical(uint64(m.StayTimeUv))
	}
	if m.RpageVisitPv != 0 {
		n += 1 + sovStatistical(uint64(m.RpageVisitPv))
	}
	if m.RpageVisitUv != 0 {
		n += 1 + sovStatistical(uint64(m.RpageVisitUv))
	}
	if m.DpageVisitPv != 0 {
		n += 1 + sovStatistical(uint64(m.DpageVisitPv))
	}
	if m.DpageVisitUv != 0 {
		n += 1 + sovStatistical(uint64(m.DpageVisitUv))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStatistical(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStatistical(x uint64) (n int) {
	return sovStatistical(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetUsersOverviewRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersOverviewRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersOverviewRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uniacid", wireType)
			}
			m.Uniacid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uniacid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistical
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenidWa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistical
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenidWa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistical
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersOverviewResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersOverviewResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersOverviewResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPlatformUsers", wireType)
			}
			m.TotalPlatformUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPlatformUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRoamUsers", wireType)
			}
			m.TotalRoamUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRoamUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRoamMiniUsers", wireType)
			}
			m.TotalRoamMiniUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRoamMiniUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPlatnewUsers", wireType)
			}
			m.TotalPlatnewUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPlatnewUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRoamnewUsers", wireType)
			}
			m.TotalRoamnewUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRoamnewUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSharenewUsers", wireType)
			}
			m.TotalSharenewUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSharenewUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRapltnewUsers", wireType)
			}
			m.TotalRapltnewUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRapltnewUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRmininewUsers", wireType)
			}
			m.TotalRmininewUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRmininewUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWxAPIDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWxAPIDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWxAPIDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uniacid", wireType)
			}
			m.Uniacid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uniacid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWxAPIDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWxAPIDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWxAPIDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayRoamTusers", wireType)
			}
			m.YesterdayRoamTusers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YesterdayRoamTusers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayRoamNewusers", wireType)
			}
			m.YesterdayRoamNewusers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YesterdayRoamNewusers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayRoamCancelusers", wireType)
			}
			m.YesterdayRoamCancelusers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YesterdayRoamCancelusers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayShareTusers", wireType)
			}
			m.YesterdayShareTusers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YesterdayShareTusers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayShareNewusers", wireType)
			}
			m.YesterdayShareNewusers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YesterdayShareNewusers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayShareCancelusers", wireType)
			}
			m.YesterdayShareCancelusers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YesterdayShareCancelusers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSalesDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSalesDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSalesDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uniacid", wireType)
			}
			m.Uniacid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uniacid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistical
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenidWa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistical
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenidWa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistical
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSalesDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSalesDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSalesDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YeterdayNeworders", wireType)
			}
			m.YeterdayNeworders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YeterdayNeworders |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayNewordPrices", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.YesterdayNewordPrices = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesterdayNewordGdtotal", wireType)
			}
			m.YesterdayNewordGdtotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YesterdayNewordGdtotal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoamMiniWxAPIDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoamMiniWxAPIDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoamMiniWxAPIDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoamMiniWxAPIDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoamMiniWxAPIDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoamMiniWxAPIDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitTotal", wireType)
			}
			m.VisitTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitTotal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitPv", wireType)
			}
			m.VisitPv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitPv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitUv", wireType)
			}
			m.VisitUv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitUv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitUvNew", wireType)
			}
			m.VisitUvNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitUvNew |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayTimeUv", wireType)
			}
			m.StayTimeUv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayTimeUv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpageVisitPv", wireType)
			}
			m.RpageVisitPv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpageVisitPv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpageVisitUv", wireType)
			}
			m.RpageVisitUv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpageVisitUv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DpageVisitPv", wireType)
			}
			m.DpageVisitPv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DpageVisitPv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DpageVisitUv", wireType)
			}
			m.DpageVisitUv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DpageVisitUv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatistical(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatistical
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatistical
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStatistical
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStatistical
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStatistical(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStatistical = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatistical   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("statistical.proto", fileDescriptor_statistical_ce04bc59675c22c1) }

var fileDescriptor_statistical_ce04bc59675c22c1 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6e, 0xd3, 0x3e,
	0x18, 0x5d, 0xda, 0xfd, 0xf6, 0xe7, 0x5b, 0xb5, 0xdf, 0xea, 0x6d, 0x5d, 0x56, 0xa4, 0x32, 0x05,
	0x04, 0x13, 0x13, 0x15, 0x1a, 0x08, 0x71, 0x81, 0x90, 0xf8, 0x23, 0x55, 0x5c, 0x30, 0xaa, 0x6c,
	0x65, 0xe2, 0xaa, 0x32, 0x8d, 0x19, 0x96, 0xd2, 0xc4, 0x8b, 0xdd, 0x94, 0x5c, 0xf0, 0x1e, 0x08,
	0x89, 0xa7, 0xe0, 0x25, 0xb8, 0x41, 0xe2, 0x11, 0xd0, 0xb8, 0xe5, 0x21, 0x50, 0x6c, 0x27, 0x71,
	0xb2, 0x4e, 0xdb, 0x05, 0x77, 0xb5, 0xcf, 0x39, 0x9f, 0x8f, 0x73, 0x3e, 0xdb, 0x85, 0x26, 0x17,
	0x58, 0x50, 0x2e, 0xe8, 0x08, 0xfb, 0x5d, 0x16, 0x85, 0x22, 0x44, 0x4d, 0x0f, 0x53, 0x3f, 0xe9,
	0x1a, 0x80, 0xf3, 0x09, 0xd6, 0x7b, 0x44, 0x0c, 0x38, 0x89, 0xf8, 0xeb, 0x98, 0x44, 0x31, 0x25,
	0x53, 0x97, 0x30, 0x64, 0xc3, 0xe2, 0x24, 0xa0, 0x78, 0x44, 0x3d, 0xdb, 0xda, 0xb1, 0x76, 0xeb,
	0x6e, 0x36, 0x44, 0x2d, 0x58, 0x08, 0x19, 0x09, 0xa8, 0x67, 0xd7, 0x76, 0xac, 0xdd, 0x65, 0x57,
	0x8f, 0x50, 0x1b, 0x96, 0xd4, 0xaf, 0x63, 0x6c, 0xd7, 0x25, 0x92, 0x8f, 0x75, 0xb5, 0x30, 0x15,
	0xcd, 0x4b, 0x28, 0x1b, 0x3a, 0x5f, 0xea, 0xb0, 0x71, 0x7e, 0x7d, 0xce, 0xd0, 0x3d, 0xd8, 0x10,
	0xa1, 0xc0, 0xfe, 0x90, 0xf9, 0x58, 0xbc, 0x0f, 0xa3, 0xf1, 0x70, 0x92, 0x72, 0xb4, 0x1b, 0x24,
	0xb1, 0xbe, 0x86, 0xa4, 0x1a, 0xed, 0xc2, 0x9a, 0x52, 0x44, 0x21, 0xce, 0xd8, 0x35, 0xc9, 0x5e,
	0x95, 0xf3, 0x6e, 0x88, 0x35, 0x33, 0xaf, 0x9d, 0x32, 0x5f, 0xd1, 0x80, 0x6a, 0x76, 0xdd, 0xa8,
	0xed, 0x6a, 0x48, 0x29, 0xba, 0xb0, 0x5e, 0xb8, 0x09, 0xc8, 0x54, 0x0b, 0xe6, 0xa5, 0xa0, 0x99,
	0x9b, 0x09, 0xc8, 0xb4, 0xc2, 0x4f, 0x57, 0x28, 0xf8, 0xff, 0x19, 0x7c, 0x57, 0x21, 0x15, 0x47,
	0xfc, 0x03, 0x8e, 0x48, 0x21, 0x58, 0x30, 0x1c, 0x1d, 0x6a, 0xa8, 0xba, 0x07, 0xcc, 0x7c, 0xc3,
	0xd2, 0xa2, 0xb9, 0x07, 0x0d, 0x55, 0x15, 0x63, 0x1a, 0xd0, 0x42, 0xb1, 0x64, 0x2a, 0x34, 0x24,
	0x15, 0xce, 0x1e, 0xfc, 0xdf, 0x23, 0xe2, 0xf8, 0xe3, 0xd3, 0xfe, 0xcb, 0x17, 0x58, 0x60, 0x97,
	0x9c, 0x5e, 0xdc, 0x17, 0xce, 0x9f, 0x1a, 0xac, 0x95, 0xd9, 0x9c, 0xa1, 0x7d, 0xd8, 0x4c, 0x08,
	0x17, 0x24, 0xf2, 0x70, 0xa2, 0x72, 0x11, 0x66, 0x8c, 0xeb, 0x39, 0x98, 0x7e, 0x8d, 0x23, 0x09,
	0xa1, 0x87, 0xb0, 0x55, 0xd1, 0x04, 0x64, 0x6a, 0xc6, 0xb9, 0x59, 0x52, 0x1d, 0x68, 0x10, 0x3d,
	0x86, 0x76, 0x45, 0x37, 0xc2, 0xc1, 0x88, 0xf8, 0x66, 0xb6, 0x76, 0x49, 0xfa, 0xbc, 0xc0, 0xd1,
	0x03, 0x68, 0x15, 0x6a, 0x99, 0x42, 0x66, 0x55, 0x85, 0xbc, 0x91, 0xa3, 0x32, 0x07, 0xed, 0xf5,
	0x11, 0xd8, 0x55, 0x55, 0x6e, 0x56, 0x85, 0xdd, 0x2a, 0xeb, 0x72, 0xb7, 0x4f, 0xe0, 0x5a, 0x55,
	0x69, 0xda, 0x55, 0xc1, 0x6f, 0x97, 0xc5, 0x86, 0x5f, 0x27, 0x91, 0xd9, 0x1c, 0x62, 0x9f, 0xf0,
	0x4b, 0xb3, 0xf9, 0xc7, 0x67, 0xf6, 0x9b, 0x25, 0x93, 0x36, 0xd6, 0xe6, 0x0c, 0xdd, 0x05, 0x94,
	0x10, 0xbd, 0x9d, 0x80, 0x4c, 0xc3, 0xc8, 0x2b, 0x62, 0x6e, 0x66, 0xc8, 0x41, 0x06, 0x94, 0x43,
	0x56, 0xfc, 0x21, 0x8b, 0xe8, 0x88, 0xa8, 0x90, 0x6b, 0x46, 0xc8, 0x4a, 0xd4, 0x97, 0x60, 0xf9,
	0x83, 0x6b, 0xdd, 0x89, 0x27, 0x7b, 0x57, 0x47, 0xdc, 0xaa, 0x08, 0x7b, 0x0a, 0x75, 0xb6, 0x61,
	0xab, 0x47, 0x44, 0x76, 0xac, 0xcd, 0xa6, 0x76, 0x7e, 0xd4, 0xc0, 0x9e, 0x8d, 0x71, 0x86, 0xae,
	0xc3, 0x4a, 0x4c, 0x39, 0x15, 0x43, 0xb5, 0x88, 0xda, 0x11, 0xc8, 0xa9, 0xa3, 0x74, 0x06, 0x6d,
	0xc3, 0x92, 0x22, 0xb0, 0x58, 0x37, 0xe8, 0xa2, 0x1c, 0xf7, 0xe3, 0x02, 0x9a, 0xc4, 0xda, 0x9d,
	0x82, 0x06, 0x31, 0xda, 0x81, 0x46, 0x06, 0xa5, 0xfb, 0xd0, 0x5d, 0x06, 0x1a, 0x3e, 0x20, 0xd3,
	0x94, 0xc1, 0x05, 0x4e, 0x86, 0x82, 0x8e, 0x49, 0x5a, 0x40, 0xf5, 0x13, 0xa4, 0x73, 0x47, 0x74,
	0x4c, 0x06, 0x31, 0xba, 0x09, 0xab, 0x11, 0xc3, 0x27, 0x64, 0x98, 0xaf, 0xaf, 0xda, 0xa6, 0x21,
	0x67, 0xdf, 0x68, 0x13, 0x15, 0xd6, 0x24, 0xd6, 0x77, 0x84, 0xc1, 0x52, 0xb5, 0xbc, 0x72, 0x2d,
	0x75, 0x2f, 0x34, 0xbc, 0x4a, 0x2d, 0xaf, 0x5c, 0x6b, 0xb9, 0xca, 0x1a, 0xc4, 0xfb, 0x5f, 0xeb,
	0xb0, 0x72, 0x58, 0xbc, 0x31, 0x88, 0xc8, 0x7e, 0x29, 0xdd, 0xf1, 0xe8, 0x56, 0xf7, 0xdc, 0x5b,
	0xd4, 0x9d, 0xf1, 0x10, 0xb5, 0x6f, 0x5f, 0x89, 0xc7, 0x99, 0x33, 0x87, 0xde, 0x42, 0xc3, 0xbc,
	0x80, 0x90, 0x33, 0x5b, 0x6a, 0x46, 0xdf, 0xbe, 0x71, 0x29, 0xc7, 0x28, 0x9d, 0x77, 0xfc, 0x45,
	0xa5, 0xcd, 0xe3, 0x78, 0x51, 0xe9, 0xd2, 0xb1, 0x71, 0xe6, 0xd0, 0xa9, 0x7c, 0x00, 0xcf, 0xf5,
	0x1e, 0xba, 0x33, 0x5b, 0x3e, 0xab, 0x81, 0xdb, 0x7b, 0x57, 0xe6, 0xa6, 0x4b, 0x3e, 0x5b, 0xfb,
	0x7e, 0xd6, 0xb1, 0x7e, 0x9e, 0x75, 0xac, 0x5f, 0x67, 0x1d, 0xeb, 0xf3, 0xef, 0xce, 0xdc, 0xbb,
	0x05, 0xf9, 0xff, 0xe0, 0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x65, 0xd2, 0x84, 0x34,
	0x08, 0x00, 0x00,
}
